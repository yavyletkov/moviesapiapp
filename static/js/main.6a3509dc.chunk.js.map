{"version":3,"sources":["components/Sidebar/Sidebar.module.scss","components/CardsWrapper/CardsWrapper.module.scss","redux/reducer.js","api/api.js","components/Sidebar/Sidebar.jsx","components/Pagination/Pagination.jsx","components/MovieItem/MovieItem.jsx","components/CardsWrapper/CardsWrapper.jsx","components/SortTabs/SortTabs.jsx","components/Main/Main.jsx","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","initialState","axios","baseURL","currentPage","movies","toWatch","sortBy","setMovies","type","setCurrentPage","page","reducer","state","action","movie","id","title","filter","item","method","connect","props","mappedToWatchList","map","className","key","s","sidebar","Pagination","pagesCount","pageSize","portionSize","onPageChange","pages","i","push","portionsCount","Math","ceil","useState","portionNumber","setPortionNumber","firstPageInPortion","lastPageInPortion","onClick","liClassName","classnames","MovieItem","addInToWatch","removeFromToWatch","length","added","setAdded","onBtnClick","src","backdrop_path","poster_path","alt","vote_average","getMovies","dispatch","fetch","then","response","json","data","console","log","results","useEffect","cardsWrapper","setSortBy","store","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6a3509dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__3qUkX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsWrapper\":\"CardsWrapper_cardsWrapper__3V69y\"};","import API from \"../api/api\";\n\nlet initialState = {\n    currentPage: 1,\n    movies: [],\n    toWatch: [],\n    sortBy: 'popularity.desc'\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET-MOVIES': {\n            return {...state, movies: action.movies}\n        }\n        case 'ADD-IN-TO-WATCH': {\n            let movie = {id: action.id, title: action.title};\n            return {...state, toWatch: [...state.toWatch, movie]}\n        }\n        case 'REMOVE-FROM-TO-WATCH': {\n            return {...state, toWatch: state.toWatch.filter(item => {\n                return item.id !== action.id\n            })}\n        }\n        case 'SET-CURRENT-PAGE': {\n            return {...state, currentPage: action.page}\n        }\n        case 'SET-SORT-BY': {\n            return {...state, sortBy: action.method}\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport let getMovies = (sortBy, page) => (dispatch) => {\n    debugger\n    // API.getMovies(sortBy, page)\n    //     .then(response => {\n    //         debugger\n    //         console.log('ITEM', response.results[0])\n    //         dispatch(setMovies(response.results));\n    //     })\n    fetch(`https://api.themoviedb.org/3/discover/movie?api_key=999980599119f1890b5daf0c2e763b81&language=en-EN&sort_by=${sortBy}&page=${page}`)\n        .then(response => {\n            debugger\n            return response.json()\n        })\n        .then(data => {\n            debugger\n            return data\n        })\n        .then(response => {\n            debugger\n            console.log('ITEM', response.results[0])\n            dispatch(setMovies(response.results));\n        })\n}\n\nexport let setMovies = (movies) => {return {type: 'SET-MOVIES', movies}};\nexport let addInToWatch = (id, title) => {return {type: 'ADD-IN-TO-WATCH', id, title}};\nexport let removeFromToWatch = (id, title) => {return {type: 'REMOVE-FROM-TO-WATCH', id, title}};\nexport let setCurrentPage = (page) => {return {type: 'SET-CURRENT-PAGE', page}};\nexport let setSortBy = (method) => {return {type: 'SET-SORT-BY', method}};\n\n\nexport default reducer;","import * as axios from \"axios\";\n\nconst API_KEY = '999980599119f1890b5daf0c2e763b81';\n\nconst instance = axios.create({\n    baseURL: `https://api.themoviedb.org/3/discover/movie`\n});\n\nconst API = {\n    getMovies (sortBy = 'popularity.desc', page = 1) {\n        return instance.get(`?api_key=${API_KEY}&language=en-EN&sort_by=${sortBy}&page=${page}`)\n            .then(response => {\n                return response.data\n            })\n    },\n    getMoviesByFetch (sortBy = 'popularity.desc', page = 1) {\n        fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=en-EN&sort_by=${sortBy}&page=${page}`)\n            .then(response => {\n                debugger\n                return response.json()\n            })\n            .then(data => {\n                debugger\n                return data\n            })\n    }\n};\n\nexport default API;","import React from \"react\";\nimport s from \"./Sidebar.module.scss\"\nimport {connect} from \"react-redux\";\nimport {setCurrentPage} from \"../../redux/reducer\";\n\nlet Sidebar = (props) => {\n\n    let mappedToWatchList = props.toWatch.map(item => {\n        return <div className='card m-3 p-3' key={item.id}>{item.title}</div>\n    });\n\n    return (\n        <div className={s.sidebar}>\n            <div className='m-3'><h2>TO WATCH</h2></div>\n            <div>{mappedToWatchList}</div>\n        </div>\n    )\n}\n\nlet mstp = (state) => {\n    return {\n        toWatch: state.toWatch\n    }\n}\n\nexport default connect(mstp, setCurrentPage)(Sidebar);","import React, {useState} from \"react\";\nimport * as classnames from \"classnames\";\n\nconst Pagination = ({pagesCount = 500, pageSize, currentPage = 1, portionSize = 10, onPageChange}) => {\n    let pages = [];\n    for (let i = 0; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionsCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n    let firstPageInPortion = (portionNumber - 1) * portionSize + 1;\n    let lastPageInPortion = portionNumber * portionSize;\n\n\n    return (\n        <nav>\n            <ul className='pagination justify-content-center mt-3' >\n                {portionNumber > 1 && <li className='page-item' onClick={() => setPortionNumber(portionNumber - 1)}>\n                    <span className='page-link'>PREV</span>\n                </li>}\n\n                {pages\n                    .filter(page => {\n                        return page >= firstPageInPortion && page <= lastPageInPortion\n                    })\n                    .map(page => {\n                        let liClassName = classnames('page-item', {'active': +page === currentPage});\n                        return <li className={liClassName} key={page}>\n                            <span className='page-link' onClick={() => onPageChange(page)}>{page}</span>\n                        </li>\n                    })}\n\n                {portionNumber < portionsCount && <li className='page-item' onClick={() => setPortionNumber(portionNumber + 1)}>\n                    <span className='page-link'>NEXT</span>\n                </li>}\n            </ul>\n        </nav>\n    )\n\n}\n\nexport default Pagination","import React, {useState} from \"react\";\n\nconst MovieItem = ({movie, addInToWatch, removeFromToWatch, toWatch}) => {\n\n    let initialState = () => {\n        if (toWatch.length) {\n            for (let i = 0; i <= toWatch.length; i++) {\n                if (toWatch[i]) {\n                    if (toWatch[i].id === movie.id) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n\n    let [added, setAdded] = useState(initialState);\n\n    let onBtnClick = () => {\n        if (!added) {\n            addInToWatch(movie.id, movie.title);\n            setAdded(true)\n        }\n        else {\n            removeFromToWatch(movie.id, movie.title);\n            setAdded(false)\n        }\n    }\n\n    return (\n        <div className='card'>\n            <img className='card-img-top'\n                 src={`https://image.tmdb.org/t/p/w500/${movie.backdrop_path || movie.poster_path}`}\n                 alt=''>\n\n            </img>\n\n            <div className='card-body'>\n                <h6 className='card-title'>{movie.title}</h6>\n                <p>Rating: {movie.vote_average}</p>\n                {!added ? <button className='btn btn-secondary' onClick={onBtnClick}>Add movie</button>\n                    : <button className='btn btn-primary' onClick={onBtnClick}>Remove movie</button>}\n            </div>\n\n        </div>\n    )\n}\n\nexport default MovieItem;","import React, {useEffect} from 'react';\nimport {connect} from \"react-redux\";\nimport {addInToWatch, getMovies, removeFromToWatch, setMovies} from \"../../redux/reducer\";\nimport MovieItem from \"../MovieItem/MovieItem\";\nimport s from './CardsWrapper.module.scss'\n\nconst CardsWrapper = ({getMovies, ...props}) => {\n\n    useEffect(() => {\n        getMovies(props.sortBy, props.currentPage)\n    }, [getMovies, props.currentPage, props.sortBy]);\n\n    return (\n        <main className={s.cardsWrapper}>\n\n            {props.movies.map((movie) => {\n                return <MovieItem key={movie.id} movie={movie}\n                                  toWatch={props.toWatch}\n                                  addInToWatch={props.addInToWatch}\n                                  removeFromToWatch={props.removeFromToWatch}/>\n            })}\n\n        </main>\n    )\n}\n\nconst mstp = (state) => {\n    return {\n        movies: state.movies,\n        currentPage: state.currentPage,\n        sortBy: state.sortBy,\n        toWatch: state.toWatch\n    }\n};\n\nexport default connect(mstp, {setMovies, getMovies, addInToWatch, removeFromToWatch})(CardsWrapper);","import React from \"react\";\nimport {setSortBy} from \"../../redux/reducer\";\nimport {connect} from \"react-redux\";\n\nlet SortTabs = ({ setSortBy, sortBy}) => {\n\n    return (\n        <ul className='tabs nav nav-pills justify-content-center mt-3'>\n            <li className='nav-item' onClick={() => setSortBy('popularity.desc')}>\n                <span className={'nav-link' + (sortBy === 'popularity.desc' ? ' active' : '')}>Sort by popularity .desc</span>\n            </li>\n            <li className='nav-item' onClick={() => setSortBy('revenue.desc')}>\n                <span className={'nav-link' + (sortBy === 'revenue.desc' ? ' active' : '')}>Sort by revenue .desc</span>\n            </li>\n            <li className='nav-item' onClick={() => setSortBy('primary_release_date.desc')}>\n                <span className={'nav-link' + (sortBy === 'primary_release_date.desc' ? ' active' : '')}>Sort by release date .desc</span>\n            </li>\n        </ul>\n    )\n}\n\nlet mstp = (state) => {\n    return {\n        sortBy: state.sortBy\n    }\n};\n\nexport default connect(mstp, {setSortBy})(SortTabs);","import React from \"react\";\nimport Pagination from \"../Pagination/Pagination\";\nimport CardsWrapper from \"../CardsWrapper/CardsWrapper\";\nimport {setCurrentPage} from \"../../redux/reducer\";\nimport {connect} from \"react-redux\";\nimport SortTabs from \"../SortTabs/SortTabs\";\n\nconst Main = (props) => {\n\n    let onPageChange = (page) => {\n        props.setCurrentPage(page)\n    }\n\n    return (\n        <div>\n            <SortTabs/>\n            <Pagination currentPage={props.currentPage} onPageChange={onPageChange}/>\n            <CardsWrapper/>\n            <Pagination currentPage={props.currentPage} onPageChange={onPageChange}/>\n        </div>\n    )\n}\n\nlet mstp = (state) => {\n    return {\n        currentPage: state.currentPage\n    }\n}\n\nexport default connect(mstp, {setCurrentPage})(Main);","import React from 'react';\nimport './App.css';\nimport {connect, Provider} from \"react-redux\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport Main from \"./components/Main/Main\";\n\nconst App = (props) => {\n\n    return (\n        <Provider store={props.store}>\n            <div className='App'>\n                <Main/>\n                <Sidebar />\n            </div>\n        </Provider>\n\n    )\n}\n\nexport default connect(null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunkMiddleware from \"redux-thunk\";\nimport reducer from './reducer'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\nwindow.store = store;\n\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <App store={store}/>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}